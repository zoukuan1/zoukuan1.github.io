<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows10下使用Hexo和Github搭建个人博客</title>
    <url>/2020/10/26/first-blog/</url>
    <content><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>   <strong>安装的基本思想是尽量不往C盘塞东西，所以尽可能选择其他盘来安装</strong>。</p>
<ul>
<li><p>安装Node</p>
<p>前往Node官网 <a href="https://nodejs.org/en/">https://nodejs.org/en/</a>  ，下载最新版LTS</p>
<p><img src="/2020/10/26/first-blog/image-20201026211520822.png" alt="image-20201026211520822"></p>
<p>打开<strong>node-v12.19.0-x64.msi</strong>文件进行安装</p>
<p><img src="/2020/10/26/first-blog/image-20201026211720405.png" alt="image-20201026211720405"></p>
</li>
</ul>
<p>  <img src="/2020/10/26/first-blog/image-20201026211807081.png" alt="image-20201026211807081"></p>
<p>  <img src="/2020/10/26/first-blog/image-20201026211852195.png" alt="image-20201026211852195"></p>
<p>  出现下图，证明Node安装成功</p>
<p>  <img src="/2020/10/26/first-blog/image-20201026212001614.png" alt="image-20201026212001614"></p>
<p>  连按两次回车(<strong>ENTER</strong>)，然后直接关闭</p>
<ul>
<li><p>安装Git</p>
<p>前往Git下载网站 <a href="https://git-scm.com/">https://git-scm.com/</a> ，选择适当版本下载。</p>
<p><img src="/2020/10/26/first-blog/image-20201026225441753.png" alt="image-20201026225441753"></p>
<p>打开<strong>Git-2.29.1-64-bit.exe</strong>文件进行安装</p>
<p><img src="/2020/10/26/first-blog/image-20201026225635141.png" alt="image-20201026225635141"></p>
<p><img src="/2020/10/26/first-blog/image-20201026225658007.png" alt="image-20201026225658007"></p>
<p><img src="/2020/10/26/first-blog/image-20201026230122943.png" alt="image-20201026230122943"></p>
<p><img src="/2020/10/26/first-blog/image-20201026230152838.png" alt="image-20201026230152838"></p>
<p><img src="/2020/10/26/first-blog/image-20201026230315817.png" alt="image-20201026230315817"></p>
<p><img src="/2020/10/26/first-blog/image-20201026230337386.png" alt="image-20201026230337386"></p>
<p><img src="/2020/10/26/first-blog/image-20201026230357482.png" alt="image-20201026230357482"></p>
<p><img src="/2020/10/26/first-blog/image-20201026230441681.png" alt="image-20201026230441681"></p>
<p><img src="/2020/10/26/first-blog/image-20201026230458800.png" alt="image-20201026230458800"></p>
<p><img src="/2020/10/26/first-blog/image-20201026230520232.png" alt="image-20201026230520232"></p>
<p><img src="/2020/10/26/first-blog/image-20201026230538588.png" alt="image-20201026230538588"></p>
<p><img src="/2020/10/26/first-blog/image-20201026230606097.png" alt="image-20201026230606097"></p>
<p>​    成功结果如下：</p>
<p><img src="/2020/10/26/first-blog/image-20201026230903894.png" alt="image-20201026230903894"></p>
</li>
</ul>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="1-以管理员方式打开cmd"><a href="#1-以管理员方式打开cmd" class="headerlink" title="1.以管理员方式打开cmd"></a>1.以管理员方式打开cmd</h3><p>​        我的方法如下：</p>
<p><img src="/2020/10/26/first-blog/image-20201026212538303.png" alt="image-20201026212538303"></p>
<p><img src="/2020/10/26/first-blog/image-20201026212703489.png" alt="image-20201026212703489"></p>
<h3 id="2-查看并验证Node安装结果"><a href="#2-查看并验证Node安装结果" class="headerlink" title="2.查看并验证Node安装结果"></a>2.查看并验证Node安装结果</h3><p>​        <strong>cmd</strong>命令行输入 <code>node -v</code> ，查看<strong>Node</strong>版本；输入 <code>npm -v</code> ，查看包管理器<strong>npm</strong>版本</p>
<p><img src="/2020/10/26/first-blog/image-20201026213543111.png" alt="image-20201026213543111"></p>
<h3 id="3-安装淘宝的包管理器cnpm"><a href="#3-安装淘宝的包管理器cnpm" class="headerlink" title="3.安装淘宝的包管理器cnpm"></a>3.安装淘宝的包管理器cnpm</h3><p>​        考虑到镜像下载速度的快慢，选择使用国内的包管理器对包进行安装，这里采用淘宝的cnpm。</p>
<p>​        在<strong>cmd</strong>命令行里输入 <code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code></p>
<p><img src="/2020/10/26/first-blog/image-20201026222106396.png" alt="image-20201026222106396"></p>
<p>​        验证<strong>cnpm</strong>安装结果，命令行输入 <code>cnpm -v</code></p>
<p><img src="/2020/10/26/first-blog/image-20201026222245104.png" alt="image-20201026222245104"></p>
<h3 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h3><p>​        安装好<strong>cnpm</strong>后，在<strong>cmd</strong>命令行里输入 <code>cnpm install -g hexo-cli</code> ，安装<strong>hexo</strong></p>
<p><img src="/2020/10/26/first-blog/image-20201026224243864.png" alt="image-20201026224243864"></p>
<p>​        验证hexo安装结果，<strong>cmd</strong>命令行输入 <code>hexo -v</code></p>
<p><img src="/2020/10/26/first-blog/image-20201026224411245.png" alt="image-20201026224411245"></p>
<h3 id="5-创建Blog文件夹"><a href="#5-创建Blog文件夹" class="headerlink" title="5.创建Blog文件夹"></a>5.创建Blog文件夹</h3><p>​        首先创建Blog文件夹，用来存储编写的Blog。文件夹的位置由自己定夺，我选择在E盘处新建</p>
<p>​        <strong>myblog</strong>文件夹 ，如下图：</p>
<p><img src="/2020/10/26/first-blog/image-20201026224907157.png" alt="image-20201026224907157"></p>
<p>​        然后在<strong>cmd</strong>命令行输入 <code>cd E:/myblog</code> ，将当前路径转到目标文件夹。</p>
<h3 id="6-配置Git"><a href="#6-配置Git" class="headerlink" title="6.配置Git"></a>6.配置Git</h3><p>​        打开安装好的 <strong>git-bash.exe</strong>，命令行输入 <code>git config --global user.name &quot;xxx&quot;</code> 和 <code>git config --global user.email &quot;xxx@xx.com&quot;</code> ，配置git用户的名称和邮箱。</p>
<p><img src="/2020/10/26/first-blog/image-20201027165954462.png" alt="image-20201027165954462"></p>
<p>​        然后在本地生成ssh密钥， <strong>git-bash</strong>里输入 <code>ssh-keygen -t rsa -C &quot;xx@xxx.com&quot;</code> ，即可得到密钥。</p>
<p><img src="/2020/10/26/first-blog/image-20201027170525522.png" alt="image-20201027170525522"></p>
<p>​        在上图中显示文件保存在c盘local本地，进入到**.ssh<strong>文件夹，查看以</strong>ssh-rsa**开头的密钥。</p>
<p><img src="/2020/10/26/first-blog/image-20201027170845850.png" alt="image-20201027170845850"></p>
<p><img src="/2020/10/26/first-blog/image-20201027170931203.png" alt="image-20201027170931203"></p>
<p>​        复制密钥，然后在github官网里打开个人设置</p>
<p><img src="/2020/10/26/first-blog/image-20201027171157545.png" alt="image-20201027171157545"></p>
<p>​        在设置的左边功能栏里选择 <strong>SSH and GPG Keys</strong>， 选择<strong>New SSH key</strong> , 不用写标题，直接将刚刚复制的密钥粘贴，。</p>
<p><img src="/2020/10/26/first-blog/image-20201027171254715.png" alt="image-20201027171254715"></p>
<p><img src="/2020/10/26/first-blog/image-20201027171434239.png" alt="image-20201027171434239"></p>
<p><img src="/2020/10/26/first-blog/image-20201027171641121.png" alt="image-20201027171641121"></p>
<h3 id="7-Blog初始化"><a href="#7-Blog初始化" class="headerlink" title="7.Blog初始化"></a>7.Blog初始化</h3><p>​        配置好git后，在<strong>git-bash</strong>里输入 <code>cd /e/myblog</code> , 将当前路径转移到目标文件夹，再输入<code>hexo init</code></p>
<p><img src="/2020/10/26/first-blog/image-20201027172021077.png" alt="image-20201027172021077"></p>
<p>​        然后在 <strong>cmd</strong> 命令行里输入<code>hexo s</code> ，启动hexo</p>
<p><img src="/2020/10/26/first-blog/image-20201027172159713.png" alt="image-20201027172159713"></p>
<p>​        在浏览器上打开 <strong>localhost:4000</strong>，即可查看我们编写的blog，在此已完成blog平台的搭建</p>
<p><img src="/2020/10/26/first-blog/image-20201027172403843.png" alt="image-20201027172403843"></p>
<p>​        此时可以编写新的blog，在<strong>cmd</strong>命令行里输入 <strong>ctrl+c</strong> ，再输入<strong>Y</strong> ， 终止hexo运行， 这时候无法进入上述网址。输入<code>hexo n &quot;my first blog&quot;</code> ，在<strong>E://myblog/source/_posts</strong>文件夹里存在一个新建的md文件，这就是blog，以后每个新的blog都将保存在这里。</p>
<p><img src="/2020/10/26/first-blog/image-20201027173141927.png" alt="image-20201027173141927"></p>
<p><img src="/2020/10/26/first-blog/image-20201027173229694.png" alt="image-20201027173229694"></p>
<p>​        在这里可以选择相应的md编写软件来对md文件进行编辑，我选择Typora，当然也可以用记事本，但输入的语言格式要符合md规范。然后cmd命令行里输入<code>hexo g</code> ，将新写的blog发布。如果输入<code>hexo clean</code> ，可以清理数据库缓存。</p>
<p><img src="/2020/10/26/first-blog/image-20201027173716448.png" alt="image-20201027173716448"></p>
<p>​        这时候再输入<code>hexo s</code> ，在<strong>localhost:4000</strong>里即可看到新发布的blog</p>
<p><img src="/2020/10/26/first-blog/image-20201027173844199.png" alt="image-20201027173844199"></p>
<h3 id="8-配置公网网址"><a href="#8-配置公网网址" class="headerlink" title="8.配置公网网址"></a>8.配置公网网址</h3><p>​        此时的blog网址只能自己本地查看，外人无法进入浏览，此时借由github搭建公网网址。首先在github上新建仓库，仓库名为用户名组成的github网址，<strong>必须与用户名相同</strong>。这个仓库名就是之后让外人进入你blog的网址。</p>
<p><img src="/2020/10/26/first-blog/image-20201027174056649.png" alt="image-20201027174056649"></p>
<p><img src="/2020/10/26/first-blog/image-20201027200019309.png" alt="image-20201027200019309"></p>
<p>​        回到<strong>cmd</strong>命令行，先退出hexo，然后输入<code>cnpm install --save hexo-deployer-git</code> </p>
<p><img src="/2020/10/26/first-blog/image-20201027174754884.png" alt="image-20201027174754884"></p>
<p>​        在E://myblog文件夹里找到<strong>_config.yml</strong>文件，对其配置。在最后地方的 <strong>type:””**处，往</strong>‘’<strong>里写入</strong>git<strong>，然后换行写入 **repo: ‘’</strong> ，(<strong>注意在 : 后加一个空格，再写’’</strong>)，**’’<strong>里写入刚刚新建的仓库链接，即</strong>仓库页面的HTTPS | SSH处展示的链接<strong>，复制写入即可。再换行写入</strong>branch: ‘master’** ，保存文件。</p>
<p><img src="/2020/10/26/first-blog/image-20201027174929832.png" alt="image-20201027174929832"></p>
<p><img src="/2020/10/26/first-blog/image-20201027175408829.png" alt="image-20201027175408829"></p>
<p><img src="/2020/10/26/first-blog/image-20201027175642042.png" alt="image-20201027175642042"></p>
<p>​       然后在<strong>git-bash</strong>命令行里输入<code>hexo d</code> ，将blog部署到github远端，过程中输入**github的用户名和密码(第一次部署要输入)**，即可完成远端部署。</p>
<p><img src="/2020/10/26/first-blog/image-20201027180949005.png" alt="image-20201027180949005"></p>
<hr>
<h2 id="Blog发布的步骤"><a href="#Blog发布的步骤" class="headerlink" title="Blog发布的步骤"></a>Blog发布的步骤</h2><h3 id="1-在cmd命令行里先将路径转到blog文件夹，再输入-hexo-n-“new-blog”，创建md文件"><a href="#1-在cmd命令行里先将路径转到blog文件夹，再输入-hexo-n-“new-blog”，创建md文件" class="headerlink" title="1.在cmd命令行里先将路径转到blog文件夹，再输入 hexo n “new blog”，创建md文件"></a>1.在cmd命令行里先将路径转到blog文件夹，再输入 hexo n “new blog”，创建md文件</h3><h3 id="2-对md文件进行编辑"><a href="#2-对md文件进行编辑" class="headerlink" title="2.对md文件进行编辑"></a>2.对md文件进行编辑</h3><h3 id="3-在cmd命令行里输入-hexo-g-，生成blog"><a href="#3-在cmd命令行里输入-hexo-g-，生成blog" class="headerlink" title="3.在cmd命令行里输入 hexo -g ，生成blog"></a>3.在cmd命令行里输入 hexo -g ，生成blog</h3><h3 id="4-在cmd命令行里输入-hexo-s-，启动blog平台-localhost-4000"><a href="#4-在cmd命令行里输入-hexo-s-，启动blog平台-localhost-4000" class="headerlink" title="(4.在cmd命令行里输入 hexo -s ，启动blog平台(localhost:4000))"></a>(4.在cmd命令行里输入 hexo -s ，启动blog平台(localhost:4000))</h3><h3 id="5-在git-bash里先将路径转到blog文件夹，输入-hexo-d-，将blog部署到公网网址-用户名-github-io"><a href="#5-在git-bash里先将路径转到blog文件夹，输入-hexo-d-，将blog部署到公网网址-用户名-github-io" class="headerlink" title="5.在git-bash里先将路径转到blog文件夹，输入 hexo d ，将blog部署到公网网址(用户名.github.io)"></a>5.在git-bash里先将路径转到blog文件夹，输入 hexo d ，将blog部署到公网网址(用户名.github.io)</h3><hr>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="本地图片无法显示"><a href="#本地图片无法显示" class="headerlink" title="本地图片无法显示"></a>本地图片无法显示</h3><p>解决方法：首先在<strong>git-bash</strong>里输入<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code>，安装好插件后打开<strong>_config.yml</strong>文件，修改<code>post_asset_folder: false</code>为<code>post_asset_folder: true</code>。最后在<strong>blog/public/2020/10/26/first-blog</strong>处放入<strong>blog/source/_posts/first-blog.assets</strong>文件夹里的全部图片。</p>
<p>解释：first-blog.assets为你编写的blog文件所使用的图片文件夹，当你放入图片到md文档时，会自动将图片保存到first-blog.assets里。hexo-asset-image是一个插件，可以将本地图片以正确格式插入到网页源码里。修改_config.yml的目的是让hexo能够调用该插件。blog的发布网址本质上是一个网站，该网站保存在public文件夹里。而每个博客都有自己的一个网页，hexo根据博客发布的时间来放置每个博客的index.html。以本博客为例，发布时间为2020/10/26，则hexo会在public文件夹里创建2020文件夹，在2020文件夹里创建10文件夹，以此类推，最后在26文件夹里创建博客文件夹，即以博客名命名的文件夹，这个文件夹下就放置本博客的index.html。hexo-assets-image的作用就是将图片的引用地址设置在此文件夹下，所以需要将本博客的图片文件夹first-blog.assets里的全部图片放到index.html所在的文件夹里，即可实现图片相对路径的调用，也就解决此问题。</p>
]]></content>
      <categories>
        <category>项目(平台)搭建</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Github</tag>
        <tag>Windows 10</tag>
      </tags>
  </entry>
  <entry>
    <title>windows10下解决Github网站加载超时问题</title>
    <url>/2020/11/11/login-problem-about-Github/</url>
    <content><![CDATA[<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>Github是我们学习代码的主要网站之一，但由于国内网的原因，导致该网站(<a href="https://github.com/">https://github.com/</a>) 有时无法加载进入，因此了解如何解决该问题很有必要。</p>
<p>按以下步骤完成操作：</p>
<h4 id="1-查询Github最新IP地址"><a href="#1-查询Github最新IP地址" class="headerlink" title="1.查询Github最新IP地址"></a>1.查询Github最新IP地址</h4><p>进入地址查询网站<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a> ，查询以下网站的IP地址</p>
<p><strong>github.com</strong> (<a href="https://github.com.ipaddress.com/">https://github.com.ipaddress.com/</a>) </p>
<p><strong>github.global.ssl.fastly.net</strong> (<a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net">https://fastly.net.ipaddress.com/github.global.ssl.fastly.net</a>) </p>
<p>如下图：</p>
<p><img src="/2020/11/11/login-problem-about-Github/image-20201111200005781.png" alt="image-20201111200005781"></p>
<p><img src="/2020/11/11/login-problem-about-Github/image-20201111200039892.png" alt="image-20201111200039892"></p>
<h4 id="2-修改HOSTS文件"><a href="#2-修改HOSTS文件" class="headerlink" title="2.修改HOSTS文件"></a>2.修改HOSTS文件</h4><p>在系统盘(一般是C盘)里，找到 <strong>Windows</strong> 文件夹，进入并找到 <strong>System32</strong> 文件夹，进入并找到 <strong>drivers</strong> 文件夹，进入并找到 <strong>etc</strong> 文件夹，发现 <strong>HOSTS</strong> 文件。具体路径如下：</p>
<p><img src="/2020/11/11/login-problem-about-Github/image-20201111200642209.png" alt="image-20201111200642209"></p>
<p>然后鼠标左键点击文件夹左上角的<strong>文件</strong></p>
<p><img src="/2020/11/11/login-problem-about-Github/image-20201111200749393.png" alt="image-20201111200749393"></p>
<p>选择<strong>打开Windows PowerShell(R)**，再选择</strong>以管理员身份打开Windows PowerShell(A**)，以此以管理员身份进入系统脚本</p>
<p><img src="/2020/11/11/login-problem-about-Github/image-20201111200827399.png" alt="image-20201111200827399"></p>
<p>打开后输入<code>notepad HOSTS</code>，用记事本方式编辑<strong>HOSTS</strong>文件</p>
<p><img src="/2020/11/11/login-problem-about-Github/image-20201111201108125.png" alt="image-20201111201108125"></p>
<h4 id="3-HOSTS文件添加IP地址"><a href="#3-HOSTS文件添加IP地址" class="headerlink" title="3.HOSTS文件添加IP地址"></a>3.HOSTS文件添加IP地址</h4><p>HOSTS文件里以 <strong>“IP地址 域名”</strong> 的方式存储需要解析的IP地址，经过本机解析后，相应网站即可正常加载进入。将第1步根据域名得到的IP地址输入到HOSTS文件里，以第1步截图为例，分别为 <code>140.82.112.4 github.com</code>、<code>199.232.69.194 github.global.ssl.fastly.net</code>。需要注意的是 <strong>IP地址</strong> 与 <strong>域名</strong> 之间存在一个空格。</p>
<p><img src="/2020/11/11/login-problem-about-Github/image-20201111202129297.png" alt="image-20201111202129297"></p>
<p>输入完成后保存即可(快捷键：ctrl + s)。至此完成所有操作步骤，此时应该能进入Github网站。</p>
<hr>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><ul>
<li>需要注意的是Github的IP地址会经常变更，使用该解决方法后，每当Github网站无法进入时都需要根据最新的IP地址对原IP地址做出修改</li>
<li>有时存在及时修改Github的IP地址后也无法进入的问题，这时候可以先将HOSTS文件里有关Github的IP地址都删除，然后保存HOSTS文件，再重新按格式输入最新的IP地址和域名，此时应该能进入Github(因为我尝试后成功了)。如若不能进入，请移步百度。</li>
</ul>
]]></content>
      <categories>
        <category>问题解决</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Windows 10</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Git将本地文件夹上传到Github</title>
    <url>/2020/11/12/upload-local-folder-to-Github/</url>
    <content><![CDATA[<p>在这里介绍如何使用git上传本地文件夹到仓库。</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li><p>在Github上新建一个仓库，注意输入仓库名后就直接创建，不需要在此添加其他文件</p>
</li>
<li><p>然后记下仓库的HTTPS，以待后用</p>
<p><img src="/2020/11/12/upload-local-folder-to-Github/image-20201112163102977.png" alt="image-20201112163102977"></p>
</li>
<li><p>打开<strong>git-bash</strong>，转移路径到需要上传的目录下，输入 <code>git init</code></p>
</li>
<li><p>输入 <code>git add .</code> ，添加所有文件到缓存区，当然也可输入 <code>git add 你要上传的文件全名</code>，可以将单个文件上传</p>
</li>
<li><p>输入 <code>git commit -m</code> “这里是每个文件后的注释”，将添加的文件提交给本地仓库</p>
</li>
<li><p>输入 <code>git remote add orgin 第二步的HTTPS链接</code>，将本地仓库关联Github</p>
</li>
<li><p>输入 <code>git push -u oringin master</code>，将文件推送到Github仓库，下次推送时可不输入 -u</p>
<hr>
</li>
</ol>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><ul>
<li>创建的时候没有添加README.md，在上传完文件夹后Github会有提醒添加，你也可以在本地写一个再使用git上传</li>
</ul>
]]></content>
      <categories>
        <category>日常使用</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Python + Flask + echarts + MySQL 实现中国地图的前端网页使用</title>
    <url>/2020/11/12/china-map/</url>
    <content><![CDATA[<p>这篇博客介绍如何使用Python、Flask、echarts、MySQL实现中国地图的前端使用，以及如何将后端数据库数据传输到前端网页。</p>
<h2 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h2><ul>
<li>Pycharm2018.2</li>
<li>Python3.7</li>
<li>MySQL5.7</li>
<li>Flask 1.1.2</li>
</ul>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol>
<li>创建数据库以及表</li>
<li>获取数据，并保存到数据库</li>
<li>搭建前端页面</li>
<li>反馈数据库数据</li>
<li>显示各省份学生信息</li>
</ol>
<hr>
<p>本次以在中国地图上显示各省份的学生信息为例</p>
<h3 id="1-创建数据库以及表"><a href="#1-创建数据库以及表" class="headerlink" title="1.创建数据库以及表"></a>1.创建数据库以及表</h3><p>在<strong>MySQL</strong>里依次输入以下代码，得到数据库和相应的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create DATABASE studentInfo CHARACTERSET gbk COLLATE gbk_chinese_ci</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create TABLE &#39;student&#39;</span><br><span class="line">(</span><br><span class="line">	&#39;name&#39; VARCHAR(45) NOT NULL,</span><br><span class="line">    &#39;sex&#39; VARCHAR(45) NOT NULL,</span><br><span class="line">    &#39;age&#39; INT NOT NULL,</span><br><span class="line">    &#39;height&#39; FLOAT NOT NULL,</span><br><span class="line">    &#39;weight&#39; DOUBLE NOT NULL,</span><br><span class="line">    &#39;province&#39; VARCHAR(45) NOT NULL,</span><br><span class="line">    &#39;parties&#39; VARCHAR(45) NOT NULL,</span><br><span class="line">    &#39;consumption&#39; INT NOT NULL,</span><br><span class="line">    &#39;havefriend&#39; VARCHAR(45) NOT NULL,</span><br><span class="line">    &#39;playgame&#39; VARCHAR(45) NOT NULL,</span><br><span class="line">    PRIMARY KEY(&#39;name&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="2-获取数据，并保存到数据库"><a href="#2-获取数据，并保存到数据库" class="headerlink" title="2.获取数据，并保存到数据库"></a>2.获取数据，并保存到数据库</h3><p>我们先要从一个叫<strong>Info.txt</strong>的文件中提取数据，里面有人名及对应的性别，如下图：</p>
<p><img src="/2020/11/12/china-map/image-20201112172619869.png" alt="image-20201112172619869"></p>
<p>但是里面的性别数据存在无效项，在提取时需要筛选，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取姓名和性别</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;Info.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> f.readlines():</span><br><span class="line">        temp = data.strip(<span class="string">&#x27;\n&#x27;</span>)         <span class="comment"># 去掉换行符</span></span><br><span class="line">        temp = temp.split(<span class="string">&#x27;,&#x27;</span>)          <span class="comment"># 以逗号做区分</span></span><br><span class="line">        <span class="keyword">if</span> temp[<span class="number">1</span>] != <span class="string">&quot;未知&quot;</span>:            <span class="comment"># 筛选性别</span></span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">            all_names.append(temp[<span class="number">0</span>])   <span class="comment"># 保留确定性别的名字</span></span><br><span class="line">            all_sex.append(temp[<span class="number">1</span>])     <span class="comment"># 保留名字对应的性别</span></span><br></pre></td></tr></table></figure>

<p>除了姓名和性别外，其他的学生信息数据都是在一定范围内随机生成的。但是<strong>Info.txt</strong>有百万条数据，即使筛选后数量仍较大，所以考虑只取500条数据存储到数据库。而为了确保随机性，选择随机生成下标来随机获取列表数据。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机抽样500个下标值，提取相应下标的姓名和性别</span></span><br><span class="line">indexs = random.sample(<span class="built_in">range</span>(<span class="number">0</span>, count), <span class="number">500</span>)</span><br><span class="line">names = [all_names[index] <span class="keyword">for</span> index <span class="keyword">in</span> indexs]</span><br><span class="line">sex = [all_sex[index] <span class="keyword">for</span> index <span class="keyword">in</span> indexs]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从0 - 33 中随机生成500份下标，提取相应的省份名</span></span><br><span class="line">province_indexs = np.random.randint(<span class="number">0</span>, <span class="number">34</span>, size=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从0 1中随机生成500份下标</span></span><br><span class="line">two_flag = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, size=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从0 - 3 中随机生成500份下标</span></span><br><span class="line">four_flag = np.random.randint(<span class="number">0</span>, <span class="number">4</span>, size=<span class="number">500</span>)</span><br></pre></td></tr></table></figure>

<p>将所有学生信息组合，逐条插入到数据库中。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将学生的相关信息组合，使用上面获取的下标向对应的列表获取数据，并保存到数据库里</span></span><br><span class="line">studentInfos = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">500</span>):</span><br><span class="line">    studentInfo = [names[i], sex[i], np.random.randint(<span class="number">18</span>, <span class="number">23</span>), np.random.uniform(<span class="number">1.50</span>, <span class="number">2.00</span>),</span><br><span class="line">                   np.random.uniform(<span class="number">70</span>, <span class="number">200</span>), province[province_indexs[i]], parties[four_flag[i]],</span><br><span class="line">                   np.random.randint(<span class="number">100</span>, <span class="number">2000</span>), havefriend[two_flag[i]], playgame[two_flag[i]]]</span><br><span class="line">    studentInfos.append(studentInfo)</span><br><span class="line">    utils.insert_data(studentInfo)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将数据保存到数据库</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_data</span>(<span class="params">studentInfo</span>):</span></span><br><span class="line">    name = studentInfo[<span class="number">0</span>]</span><br><span class="line">    sex = studentInfo[<span class="number">1</span>]</span><br><span class="line">    age = studentInfo[<span class="number">2</span>]</span><br><span class="line">    height = studentInfo[<span class="number">3</span>]</span><br><span class="line">    weight = studentInfo[<span class="number">4</span>]</span><br><span class="line">    province = studentInfo[<span class="number">5</span>]</span><br><span class="line">    parties = studentInfo[<span class="number">6</span>]</span><br><span class="line">    consumption = studentInfo[<span class="number">7</span>]</span><br><span class="line">    havefriend = studentInfo[<span class="number">8</span>]</span><br><span class="line">    playgame = studentInfo[<span class="number">9</span>]</span><br><span class="line">    sql = <span class="string">&quot;insert into studentinfo (name, sex, age, height, weight, province, parties, consumption, havefriend, playgame) &quot;</span> \</span><br><span class="line">          <span class="string">&quot;value(&#x27;&#123;&#125;&#x27;, &#x27;&#123;&#125;&#x27;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#x27;&#123;&#125;&#x27;, &#x27;&#123;&#125;&#x27;, &#123;&#125;, &#x27;&#123;&#125;&#x27;, &#x27;&#123;&#125;&#x27;)&quot;</span>.<span class="built_in">format</span>(name, sex, age, height, weight, province,</span><br><span class="line">           parties, consumption, havefriend, playgame)</span><br><span class="line">    conn, cursor = get_conn()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    close_conn(conn, cursor)</span><br></pre></td></tr></table></figure>

<p>为了防止数据库的数据丢失，将所有的学生信息都存储在一个**.csv**文件中，利于数据库维护和数据载入。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将所有学生信息写出为.csv文件</span></span><br><span class="line">file_csv = codecs.<span class="built_in">open</span>(<span class="string">&quot;studentInfo.csv&quot;</span>, <span class="string">&#x27;w+&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">writer = csv.writer(file_csv, delimiter=<span class="string">&#x27; &#x27;</span>, quotechar=<span class="string">&#x27; &#x27;</span>, quoting=csv.QUOTE_MINIMAL)</span><br><span class="line">writer.writerow([<span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;身高&quot;</span>, <span class="string">&quot;体重&quot;</span>, <span class="string">&quot;省份&quot;</span>, <span class="string">&quot;党派&quot;</span>, <span class="string">&quot;消费&quot;</span>, <span class="string">&quot;有无男/女朋友&quot;</span>, <span class="string">&quot;是否打游戏&quot;</span>])</span><br><span class="line"><span class="keyword">for</span> studentInfo <span class="keyword">in</span> studentInfos:</span><br><span class="line">    writer.writerow(studentInfo)</span><br></pre></td></tr></table></figure>

<p>至此数据获取结束，并且可以保存到MySQL数据库中。结果如下：</p>
<p><img src="/2020/11/12/china-map/image-20201112185809736.png" alt="image-20201112185809736"></p>
<h3 id="3-搭建前端页面"><a href="#3-搭建前端页面" class="headerlink" title="3.搭建前端页面"></a>3.搭建前端页面</h3><p>因为我们采用echarts插件来加载中国地图，所以需要提前准备好如下.js文件：<strong>echarts.js</strong>、<strong>jquery-1.11.1.min.js</strong>、<strong>china.js</strong>。可以选择去官网下载，我这里也提供百度云链接：<a href="https://pan.baidu.com/s/1gInLSwC-3EzKBmXYQDBXgg">https://pan.baidu.com/s/1gInLSwC-3EzKBmXYQDBXgg</a> 提取码：zkzk 解压密码：123456</p>
<p>接下来我们编写.html文件。首先导入上述.js文件，因为只显示一张中国地图，所以只需要定义一个div做分区。为了美观，还需要载入.css文件对页面排版。考虑到设置地图属性的代码过长，选择将这部分写在一个.js文件，而.html只需载入即可。具体代码分析就不进行，各位可自行理解。代码如下：</p>
<p><strong>china_map.html:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>, <span class="attr">height</span>=<span class="string">100%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../static/js/jquery-1.11.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../static/js/echarts.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../static/js/china.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;../static/css/china_map.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span>地图<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../static/js/ec_map.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../static/js/controller.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-反馈数据库数据"><a href="#4-反馈数据库数据" class="headerlink" title="4.反馈数据库数据"></a>4.反馈数据库数据</h3><p>写好前端页面后，现在需要将数据库的数据依照省份传到地图里，这里我们采用<strong>Flask + ajax</strong>的方式实现。</p>
<p><strong>Flask</strong>是一个微型的Python开发的Web框架，使用的方式如下：</p>
<p><img src="/2020/11/12/china-map/image-20201112192847962.png" alt="image-20201112192847962"></p>
<p>创建成功后，结构目录如下：</p>
<p><img src="/2020/11/12/china-map/image-20201112193132936.png" alt="image-20201112193132936"></p>
<p><strong>app.py</strong>是我们运行的主程序，在这里我们可以定义路由地址，并在该路由地址下实现相关函数的调用。例如如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>意思是当我们运行app.py时，会弹出前端页面所在的端口地址，如下图：</p>
<p><img src="/2020/11/12/china-map/image-20201112193752957.png" alt="image-20201112193752957"></p>
<p>而上面代码里的<code>app.route(&#39;/&#39;)</code>对应于<strong>127.0.0.1:5000/**的</strong>’/‘**，表示只要进入该网址，就会执行hello_world函数，返回一个Hello world到页面里。</p>
<p>理解Flask的运行逻辑后，我们需要考虑怎么提取数据库数据。本次我们需要在页面上实现这样一个效果：当鼠标放在某一省份时，会自动将来自该省份的学生总人数、男生人数、所有男生名字、女生人数、所有女生名字都显示出来。所以按照要求，我们定义相应的提取函数。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取总人数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_people</span>():</span></span><br><span class="line">    sql = <span class="string">&quot;select province,count(name) from studentinfo &quot;</span> \</span><br><span class="line">          <span class="string">&quot;group by province&quot;</span></span><br><span class="line">    res = query(sql)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取男生数量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_nums_man</span>():</span></span><br><span class="line">    sql = <span class="string">&quot;select province,count(name) from studentinfo &quot;</span> \</span><br><span class="line">          <span class="string">&quot;where sex=&#x27;男&#x27;&quot;</span> \</span><br><span class="line">          <span class="string">&quot;group by province&quot;</span></span><br><span class="line">    res = query(sql)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取女生数量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_nums_woman</span>():</span></span><br><span class="line">    sql = <span class="string">&quot;select province,count(name) from studentinfo &quot;</span> \</span><br><span class="line">          <span class="string">&quot;where sex=&#x27;女&#x27;&quot;</span> \</span><br><span class="line">          <span class="string">&quot;group by province&quot;</span></span><br><span class="line">    res = query(sql)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取男生名字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_names_man</span>():</span></span><br><span class="line">    provinces = [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;天津&quot;</span>, <span class="string">&quot;黑龙江&quot;</span>, <span class="string">&quot;吉林&quot;</span>, <span class="string">&quot;辽宁&quot;</span>, <span class="string">&quot;内蒙古&quot;</span>, <span class="string">&quot;山西&quot;</span>, <span class="string">&quot;山东&quot;</span>, <span class="string">&quot;河北&quot;</span>, <span class="string">&quot;河南&quot;</span>, <span class="string">&quot;湖北&quot;</span>, <span class="string">&quot;湖南&quot;</span>, <span class="string">&quot;江西&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;江苏&quot;</span>, <span class="string">&quot;浙江&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;福建&quot;</span>, <span class="string">&quot;广东&quot;</span>, <span class="string">&quot;广西&quot;</span>, <span class="string">&quot;贵州&quot;</span>, <span class="string">&quot;云南&quot;</span>, <span class="string">&quot;四川&quot;</span>, <span class="string">&quot;重庆&quot;</span>, <span class="string">&quot;陕西&quot;</span>, <span class="string">&quot;青海&quot;</span>, <span class="string">&quot;新疆&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;西藏&quot;</span>, <span class="string">&quot;甘肃&quot;</span>, <span class="string">&quot;安徽&quot;</span>, <span class="string">&quot;宁夏&quot;</span>, <span class="string">&quot;海南&quot;</span>, <span class="string">&quot;香港&quot;</span>, <span class="string">&quot;澳门&quot;</span>, <span class="string">&quot;台湾&quot;</span>]</span><br><span class="line">    man_names = []</span><br><span class="line">    man_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(provinces)):</span><br><span class="line">        sql = <span class="string">&quot;select name from studentinfo where province = &#x27;&#123;&#125;&#x27; and sex = &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(provinces[i], <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">        res = query(sql)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">            man_name += <span class="string">&quot;&#123;&#125; &quot;</span>.<span class="built_in">format</span>(item[<span class="number">0</span>])</span><br><span class="line">        man_names.append((provinces[i], man_name))</span><br><span class="line">        man_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> man_names</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取女生名字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_names_woman</span>():</span></span><br><span class="line">    provinces = [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;天津&quot;</span>, <span class="string">&quot;黑龙江&quot;</span>, <span class="string">&quot;吉林&quot;</span>, <span class="string">&quot;辽宁&quot;</span>, <span class="string">&quot;内蒙古&quot;</span>, <span class="string">&quot;山西&quot;</span>, <span class="string">&quot;山东&quot;</span>, <span class="string">&quot;河北&quot;</span>, <span class="string">&quot;河南&quot;</span>, <span class="string">&quot;湖北&quot;</span>, <span class="string">&quot;湖南&quot;</span>, <span class="string">&quot;江西&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;江苏&quot;</span>, <span class="string">&quot;浙江&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;福建&quot;</span>, <span class="string">&quot;广东&quot;</span>, <span class="string">&quot;广西&quot;</span>, <span class="string">&quot;贵州&quot;</span>, <span class="string">&quot;云南&quot;</span>, <span class="string">&quot;四川&quot;</span>, <span class="string">&quot;重庆&quot;</span>, <span class="string">&quot;陕西&quot;</span>, <span class="string">&quot;青海&quot;</span>, <span class="string">&quot;新疆&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;西藏&quot;</span>, <span class="string">&quot;甘肃&quot;</span>, <span class="string">&quot;安徽&quot;</span>, <span class="string">&quot;宁夏&quot;</span>, <span class="string">&quot;海南&quot;</span>, <span class="string">&quot;香港&quot;</span>, <span class="string">&quot;澳门&quot;</span>, <span class="string">&quot;台湾&quot;</span>]</span><br><span class="line">    woman_names = []</span><br><span class="line">    woman_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(provinces)):</span><br><span class="line">        sql = <span class="string">&quot;select name from studentinfo where province = &#x27;&#123;&#125;&#x27; and sex = &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(provinces[i], <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line">        res = query(sql)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">            woman_name += <span class="string">&quot;&#123;&#125; &quot;</span>.<span class="built_in">format</span>(item[<span class="number">0</span>])</span><br><span class="line">        woman_names.append((provinces[i], woman_name))</span><br><span class="line">        woman_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> woman_names</span><br></pre></td></tr></table></figure>

<p>提取后就要传给地图，这里我们采用<strong>ajax</strong>来载入数据。它的使用方法是先设置一个要跳转到的路由地址，我们可以在app.py中对这一路由地址定义一个函数，将提取的数据回传给ajax，ajax收取数据后再设置给地图的option.series.data，即可将数据载入到地图。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_map_data</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="comment">// ajax执行的路由地址</span></span><br><span class="line">        url: <span class="string">&#x27;/map&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        成功访问路由地址时，运行如下函数，参数为res</span></span><br><span class="line"><span class="comment">        将提取的数据分类别赋值给option.series.data，提供页面显示数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">            map_option.series[<span class="number">0</span>].data=res.total_nums  <span class="comment">//总人数</span></span><br><span class="line">            map_option.series[<span class="number">1</span>].data=res.man_nums    <span class="comment">//男生人数</span></span><br><span class="line">            map_option.series[<span class="number">2</span>].data=res.man_names   <span class="comment">//所有男生名字</span></span><br><span class="line">            map_option.series[<span class="number">3</span>].data=res.woman_nums  <span class="comment">//女生人数</span></span><br><span class="line">            map_option.series[<span class="number">4</span>].data=res.woman_names <span class="comment">//所有女生名字</span></span><br><span class="line">            map.setOption(map_option)           <span class="comment">//echarts对象设置修改后的option配置，完成数据供应</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//不成功访问路由地址，不进行操作</span></span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, type, errorThrown</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当链接到路由地址map，返回地图数据</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/map&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_map_data</span>():</span></span><br><span class="line">    <span class="comment"># 各省学生总人数</span></span><br><span class="line">    total_nums = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> utils.get_all_people():</span><br><span class="line">        total_nums.append(&#123;<span class="string">&#x27;name&#x27;</span>: item[<span class="number">0</span>], <span class="string">&#x27;value&#x27;</span>: <span class="built_in">int</span>(item[<span class="number">1</span>])&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 各省男学生人数</span></span><br><span class="line">    man_nums = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> utils.get_nums_man():</span><br><span class="line">        man_nums.append(&#123;<span class="string">&#x27;name&#x27;</span>: item[<span class="number">0</span>], <span class="string">&#x27;value&#x27;</span>: <span class="built_in">int</span>(item[<span class="number">1</span>])&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 各省女学生人数</span></span><br><span class="line">    woman_nums = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> utils.get_nums_woman():</span><br><span class="line">        woman_nums.append(&#123;<span class="string">&#x27;name&#x27;</span>: item[<span class="number">0</span>], <span class="string">&#x27;value&#x27;</span>: <span class="built_in">int</span>(item[<span class="number">1</span>])&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 各省男学生名字</span></span><br><span class="line">    man_names = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> utils.get_names_man():</span><br><span class="line">        man_names.append(&#123;<span class="string">&#x27;name&#x27;</span>: item[<span class="number">0</span>], <span class="string">&#x27;value&#x27;</span>: <span class="built_in">str</span>(item[<span class="number">1</span>])&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 各省女学生名字</span></span><br><span class="line">    woman_names = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> utils.get_names_woman():</span><br><span class="line">        woman_names.append(&#123;<span class="string">&#x27;name&#x27;</span>: item[<span class="number">0</span>], <span class="string">&#x27;value&#x27;</span>: <span class="built_in">str</span>(item[<span class="number">1</span>])&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将上述数据以字典形式存储</span></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    res[<span class="string">&#x27;total_nums&#x27;</span>] = total_nums</span><br><span class="line">    res[<span class="string">&#x27;man_nums&#x27;</span>] = man_nums</span><br><span class="line">    res[<span class="string">&#x27;woman_nums&#x27;</span>] = woman_nums</span><br><span class="line">    res[<span class="string">&#x27;man_names&#x27;</span>] = man_names</span><br><span class="line">    res[<span class="string">&#x27;woman_names&#x27;</span>] = woman_names</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以json形式返回结果给controller.js</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(res)</span><br></pre></td></tr></table></figure>

<p>至此我们完成了将数据库数据传给前端页面。</p>
<h3 id="5-显示各省份学生信息"><a href="#5-显示各省份学生信息" class="headerlink" title="5.显示各省份学生信息"></a>5.显示各省份学生信息</h3><p>在第4步中我们提及了学生信息的显示要求，即将来自该省份的学生总人数、男生人数、所有男生名字、女生人数、所有女生名字都显示出来。所以我们需要在地图的option配置里设置5个series，分别存储这5部分的数据。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">series: [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;学生人数&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">        mapType: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">        roam: <span class="literal">false</span>, <span class="comment">//拖动和缩放</span></span><br><span class="line">        <span class="comment">// 左侧小导航图标</span></span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                borderWidth: <span class="number">.5</span>, <span class="comment">//区域边框宽度</span></span><br><span class="line">                borderColor: <span class="string">&#x27;#009fe8&#x27;</span>, <span class="comment">//区域边框颜色</span></span><br><span class="line">                areaColor: <span class="string">&quot;#ffefd5&quot;</span>, <span class="comment">//区域颜色</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123; <span class="comment">//鼠标滑过地图高亮的相关设置</span></span><br><span class="line">                borderWidth: <span class="number">.5</span>,</span><br><span class="line">                borderColor: <span class="string">&#x27;#4b0082&#x27;</span>,</span><br><span class="line">                areaColor: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            show: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                show: <span class="literal">true</span>, <span class="comment">//省份名称</span></span><br><span class="line">                fontSize: <span class="number">10</span>,</span><br><span class="line">                color: <span class="string">&#x27;#111111&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                fontSize: <span class="number">8</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: []  <span class="comment">//数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;男生人数&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">        mapType: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">        roam: <span class="literal">false</span>, <span class="comment">//拖动和缩放</span></span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                borderWidth: <span class="number">.5</span>, <span class="comment">//区域边框宽度</span></span><br><span class="line">                borderColor: <span class="string">&#x27;#009fe8&#x27;</span>, <span class="comment">//区域边框颜色</span></span><br><span class="line">                areaColor: <span class="string">&quot;#ffefd5&quot;</span>, <span class="comment">//区域颜色</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123; <span class="comment">//鼠标滑过地图高亮的相关设置</span></span><br><span class="line">                borderWidth: <span class="number">.5</span>,</span><br><span class="line">                borderColor: <span class="string">&#x27;#4b0082&#x27;</span>,</span><br><span class="line">                areaColor: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            show: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                show: <span class="literal">true</span>, <span class="comment">//省份名称</span></span><br><span class="line">                fontSize: <span class="number">10</span>,</span><br><span class="line">                color: <span class="string">&#x27;#111111&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                fontSize: <span class="number">8</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [],  <span class="comment">//数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;男生&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">        mapType: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">        roam: <span class="literal">false</span>, <span class="comment">//拖动和缩放</span></span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                borderWidth: <span class="number">.5</span>, <span class="comment">//区域边框宽度</span></span><br><span class="line">                borderColor: <span class="string">&#x27;#009fe8&#x27;</span>, <span class="comment">//区域边框颜色</span></span><br><span class="line">                areaColor: <span class="string">&quot;#ffefd5&quot;</span>, <span class="comment">//区域颜色</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123; <span class="comment">//鼠标滑过地图高亮的相关设置</span></span><br><span class="line">                borderWidth: <span class="number">.5</span>,</span><br><span class="line">                borderColor: <span class="string">&#x27;#4b0082&#x27;</span>,</span><br><span class="line">                areaColor: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            show: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                show: <span class="literal">true</span>, <span class="comment">//省份名称</span></span><br><span class="line">                fontSize: <span class="number">10</span>,</span><br><span class="line">                color: <span class="string">&#x27;#111111&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                fontSize: <span class="number">8</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [],  <span class="comment">//数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;女生人数&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">        mapType: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">        roam: <span class="literal">false</span>, <span class="comment">//拖动和缩放</span></span><br><span class="line">        <span class="comment">// 左侧小导航图标</span></span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                borderWidth: <span class="number">.5</span>, <span class="comment">//区域边框宽度</span></span><br><span class="line">                borderColor: <span class="string">&#x27;#009fe8&#x27;</span>, <span class="comment">//区域边框颜色</span></span><br><span class="line">                areaColor: <span class="string">&quot;#ffefd5&quot;</span>, <span class="comment">//区域颜色</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123; <span class="comment">//鼠标滑过地图高亮的相关设置</span></span><br><span class="line">                borderWidth: <span class="number">.5</span>,</span><br><span class="line">                borderColor: <span class="string">&#x27;#4b0082&#x27;</span>,</span><br><span class="line">                areaColor: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            show: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                show: <span class="literal">true</span>, <span class="comment">//省份名称</span></span><br><span class="line">                fontSize: <span class="number">10</span>,</span><br><span class="line">                color: <span class="string">&#x27;#111111&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                fontSize: <span class="number">8</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: []  <span class="comment">//数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;女生&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">        mapType: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">        roam: <span class="literal">false</span>, <span class="comment">//拖动和缩放</span></span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                borderWidth: <span class="number">.5</span>, <span class="comment">//区域边框宽度</span></span><br><span class="line">                borderColor: <span class="string">&#x27;#009fe8&#x27;</span>, <span class="comment">//区域边框颜色</span></span><br><span class="line">                areaColor: <span class="string">&quot;#ffefd5&quot;</span>, <span class="comment">//区域颜色</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123; <span class="comment">//鼠标滑过地图高亮的相关设置</span></span><br><span class="line">                borderWidth: <span class="number">.5</span>,</span><br><span class="line">                borderColor: <span class="string">&#x27;#4b0082&#x27;</span>,</span><br><span class="line">                areaColor: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            show: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                show: <span class="literal">true</span>, <span class="comment">//省份名称</span></span><br><span class="line">                fontSize: <span class="number">10</span>,</span><br><span class="line">                color: <span class="string">&#x27;#111111&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                fontSize: <span class="number">8</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [],  <span class="comment">//数据</span></span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure>

<p>光有数据还不行，此时将鼠标放在省份是没有任何反应的，所以我们需要对消息框进行自定义设置。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标放在指定省份上显示的信息</span></span><br><span class="line">tooltip: &#123;</span><br><span class="line">    trigger: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">    <span class="comment">// 按照series的顺序输出相关信息</span></span><br><span class="line">    formatter: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 第一行显示每个省份的名字</span></span><br><span class="line">        <span class="keyword">var</span> res = params.name + <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 获取option里的series</span></span><br><span class="line">        <span class="keyword">var</span> myseries = map_option.series;</span><br><span class="line">        <span class="comment">// 遍历每个series，将每一个series数据逐行输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myseries.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; myseries[i].data.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (myseries[i].data[j].name == params.name) &#123;</span><br><span class="line">                    res += myseries[i].name + <span class="string">&#x27; : &#x27;</span> + myseries[i].data[j].value + <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 使显示的信息不超出边界</span></span><br><span class="line">    confine: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候我们再将鼠标放上，就会出现结果：</p>
<p><img src="/2020/11/12/china-map/image-20201112200129481.png" alt="image-20201112200129481"></p>
<p>至此我们完成了学生信息的显示，完成了所有的实现步骤。</p>
<hr>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><ul>
<li><p>如果你使用的是Google浏览器，可能会出现程序或界面修改了，但显示的还是上一次的结果。这里可能是因为Google浏览器会对网页进行静态缓存，因此在访问同一静态网址时，会自动载入上一次的结果。解决的方法是按<strong>F12</strong>进入开发者模式，找到<strong>Network</strong>后，按<strong>F5</strong>刷新一遍，即可载入修改后的页面。</p>
<p><img src="/2020/11/12/china-map/image-20201112201255444.png" alt="image-20201112201255444"></p>
</li>
<li><p>完整代码见Github：<a href="https://github.com/zoukuan1/china-map">https://github.com/zoukuan1/china-map</a></p>
</li>
<li><p>如果js文件的链接失效，请前往上述Github地址寻找下载</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
        <tag>echarts</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
